package fun.yamds.constant;

public enum SatokenErrorCodeEnum {
    E10000(10000, "代表这个异常在抛出时未指定异常细分状态码"),
    E10001(10001, "未能获取有效的上下文处理器"),
    E10002(10002, "未能获取有效的上下文"),
    E10003(10003, "JSON 转换器未实现"),
    E10011(10011, "未能从全局 StpLogic 集合中找到对应 type 的 StpLogic"),
    E10021(10021, "指定的配置文件加载失败"),
    E10022(10022, "配置文件属性无法正常读取"),
    E10031(10031, "重置的侦听器集合不可以为空"),
    E10032(10032, "注册的侦听器不可以为空"),
    E10301(10301, "提供的 Same-Token 是无效的"),
    E10311(10311, "表示未能通过 Http Basic 认证校验"),
    E10321(10321, "提供的 HttpMethod 是无效的"),
    E11001(11001, "未能读取到有效Token"),
    E11002(11002, "登录时的账号id值为空"),
    E11003(11003, "更改 Token 指向的 账号Id 时，账号Id值为空"),
    E11011(11011, "未能读取到有效Token"),
    E11012(11012, "Token无效"),
    E11013(11013, "Token已过期"),
    E11014(11014, "Token已被顶下线"),
    E11015(11015, "Token已被踢下线"),
    E11016(11016, "Token已被冻结"),
    E11031(11031, "在未集成 sa-token-jwt 插件时调用 getExtra() 抛出异常"),
    E11041(11041, "缺少指定的角色"),
    E11051(11051, "缺少指定的权限"),
    E11061(11061, "当前账号未通过服务封禁校验"),
    E11062(11062, "提供要解禁的账号无效"),
    E11063(11063, "提供要解禁的服务无效"),
    E11064(11064, "提供要解禁的等级无效"),
    E11071(11071, "二级认证校验未通过"),
    E12001(12001, "请求中缺少指定的参数"),
    E12002(12002, "构建 Cookie 时缺少 name 参数"),
    E12003(12003, "构建 Cookie 时缺少 value 参数"),
    E12101(12101, "Base64 编码异常"),
    E12102(12102, "Base64 解码异常"),
    E12103(12103, "URL 编码异常"),
    E12104(12104, "URL 解码异常"),
    E12111(12111, "md5 加密异常"),
    E12112(12112, "sha1 加密异常"),
    E12113(12113, "sha256 加密异常"),
    E12114(12114, "AES 加密异常"),
    E12115(12115, "AES 解密异常"),
    E12116(12116, "RSA 公钥加密异常"),
    E12117(12117, "RSA 私钥加密异常"),
    E12118(12118, "RSA 公钥解密异常"),
    E12119(12119, "RSA 私钥解密异常"),
    E12201(12201, "参与参数签名的秘钥不可为空"),
    E12202(12202, "给定的签名无效"),
    E12203(12203, "timestamp 超出允许的范围"),
    E20001(20001, "转发失败"),
    E20002(20002, "重定向失败"),
    E20101(20101, "企图在非 Web 上下文获取 Request、Response 等对象"),
    E20103(20103, "对象转 JSON 字符串失败"),
    E20104(20104, "JSON 字符串转 Map 失败"),
    E20105(20105, "默认的 Filter 异常处理函数"),
    E20203(20203, "对象转 JSON 字符串失败"),
    E20204(20204, "JSON 字符串转 Map 失败"),
    E20205(20205, "默认的 Filter 异常处理函数"),
    E20301(20301, "默认的拦截器异常处理函数"),
    E20302(20302, "默认的 Filter 异常处理函数"),
    E30001(30001, "redirect 重定向 url 是一个无效地址"),
    E30002(30002, "redirect 重定向 url 不在 allowUrl 允许的范围内"),
    E30003(30003, "接口调用方提供的 secretkey 秘钥无效"),
    E30004(30004, "提供的 ticket 是无效的"),
    E30005(30005, "在模式三下，sso-client 调用 sso-server 端 校验ticket接口 时，得到的响应是校验失败"),
    E30006(30006, "在模式三下，sso-client 调用 sso-server 端 单点注销接口 时，得到的响应是注销失败"),
    E30007(30007, "http 请求调用 提供的 timestamp 与当前时间的差距超出允许的范围"),
    E30008(30008, "http 请求调用 提供的 sign 无效"),
    E30009(30009, "本地系统没有配置 secretkey 字段"),
    E30010(30010, "本地系统没有配置 http 请求处理器"),
    E30011(30011, "该 ticket 不属于当前 client"),
    E30101(30101, "client_id 不可为空"),
    E30102(30102, "scope 不可为空"),
    E30103(30103, "redirect_uri 不可为空"),
    E30104(30104, "LoginId 不可为空"),
    E30105(30105, "无效 client_id"),
    E30106(30106, "无效 access_token"),
    E30107(30107, "无效 client_token"),
    E30108(30108, "Access-Token 不具备指定的 Scope"),
    E30109(30109, "Client-Token 不具备指定的 Scope"),
    E30110(30110, "无效 code 码"),
    E30111(30111, "无效 Refresh-Token"),
    E30112(30112, "请求的 Scope 暂未签约"),
    E30113(30113, "无效 redirect_url"),
    E30114(30114, "非法 redirect_url"),
    E30115(30115, "无效 client_secret"),
    E30120(30120, "redirect_uri 不一致"),
    E30122(30122, "client_id 不一致"),
    E30125(30125, "无效 response_type"),
    E30126(30126, "无效 grant_type"),
    E30127(30127, "无效 state"),
    E30141(30141, "系统暂未开放的授权模式"),
    E30142(30142, "应用暂未开放的授权模式"),
    E30151(30151, "无效的请求 Method"),
    E30191(30191, "其它异常"),
    E30201(30201, "对 jwt 字符串解析失败"),
    E30202(30202, "此 jwt 的签名无效"),
    E30203(30203, "此 jwt 的 loginType 字段不符合预期"),
    E30204(30204, "此 jwt 已超时"),
    E30205(30205, "没有配置jwt秘钥"),
    E30206(30206, "登录时提供的账号id为空"),
    E30301(30301, "jwt 模式没有提供秘钥"),
    E30302(30302, "jwt 模式不可以删除 Token"),
    E30303(30303, "Token已超时");

    private final int code;
    private final String msg;

    SatokenErrorCodeEnum(int code, String message) {
        this.code = code;
        this.msg = message;
    }

    public int getCode() {
        return code;
    }

    public String getMsg() {
        return msg;
    }

    // 通过code获取枚举实例
    public static SatokenErrorCodeEnum getByCode(int code) {
        for (SatokenErrorCodeEnum value : values()) {
            if (value.code == code) {
                return value;
            }
        }
        return null;
    }
}
